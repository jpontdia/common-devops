##########################################################################
# CICD Pipeline
##########################################################################

# Configuration for this template:
# 1.- Replace the predefined repository jpontdia/common-devops with your own.
# 2.- Update the global environment variables for the script 

name: Deployment
on:
  workflow_call:
    inputs:
      keyvault-key:
        required: true
        description: Access key to KeyVault
        type: string
    secrets:
      azure-credentials:
        required: true
        description: Azure Credentials for login
env:
  CONFIGURATIONS_REPOSITORY: common-configurations
  MULE_APPLICATION_TYPE: mule-application-example.jar
  MESSAGE_ASSET_NOT_CONFIGURED: "The mulesoft asset doesn't have any deployment configuration"
  MESSAGE_SERVICE_INTERNAL_ERROR: "There was an internal error in the deployment process"
  MESSAGE_SERVICE_NOT_DEPLOYED: "The service couldn't be deployed"
  MESSAGE_SERVICE_SUCCESS_DEPLOYED: "The service was successfully deployed"
  MESSAGE_SERVICE_BAT_SUCCESS: "The BAT tests run successfully"
  MESSAGE_SERVICE_NO_BAT: "There aren't any BAT tests"
  MESSAGE_SERVICE_BAT_FAILURE: "BAT testig with failures"
  LABEL_FORWARD: "forward"
  LABEL_DEV: "dev"
  LABEL_TST: "tst"
  LABEL_PRD: "prd"

jobs:

  ##################################################################
  # Analyse deployment of service
  ##################################################################
  verify:
    if: |
      github.actor == 'jpontdia' ||
      github.actor == 'tallguyjenks' ||
      github.actor == 'GitHubActions' ||
      github.actor == 'github-actions'
    name: verify
    runs-on: ubuntu-latest
    outputs:
      # Indicates if the service is deployable
      deployment: ${{ steps.verify-deployment.outputs.deployment }}
      deployment-env: ${{ steps.verify-deployment.outputs.deployment-env }}

    steps:

      - name: Get workflow metadata
        uses: jpontdia/common-devops/packages/configuration-issuemanagement@main
        with:
          keyvault-key: '${{ inputs.keyvault-key }}'
          azure-credentials: '${{ secrets.azure-credentials }}'

      - id: verify-deployment
        name: Verify if asset has the deployment configuration
        shell: bash
        run: |
          echo " "
          echo "*****************************************************"
          echo "Verify deployment to ${{ env.deployment_environment }} "
          echo "*****************************************************"
          echo " "      
          echo "dev cloudhub: ${{ env.configuration_cloudhub }}"
          if [ "${{ env.configuration_cloudhub }}" != "" ] ; then
            echo "deployment=true" >> $GITHUB_OUTPUT
            echo "deployment-env=${{ env.deployment_environment }}" >> $GITHUB_OUTPUT
            echo "The service has the configuration to be deployed in ${{ env.deployment_environment }} environment"
            echo
          else
            echo "deployment=false" >> $GITHUB_OUTPUT
            issue_message="${{env.MESSAGE_ASSET_NOT_CONFIGURED}}"
            echo "$issue_message"
            echo "issue_message=$issue_message" >> $GITHUB_ENV
          fi

      - id: issue-close
        name: Close issue
        if: steps.verify-deployment.outputs.deployment == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE: ${{ github.event.issue.html_url }}
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Update Issue: ${{ github.event.issue.number }} "
          echo "***********************************************"
          echo " "
          gh issue close ${{ github.event.issue.number }} \
            -c "$issue_message" \
            -r "not planned"
      
      # Runs only when deploying to dev
      - id: create-milestone
        name: Create milestone and assign to issue
        if: steps.verify-deployment.outputs.deployment == 'true' 
        env:
          GITHUB_TOKEN: ${{ env.github_admintasks_accesstoken }}
          ISSUE: ${{ github.event.issue.html_url }}
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Create milestone: ${{ env.deployment_version }}"
          echo "***********************************************"
          echo " "
          if [ "${{ env.deployment_environment }}" == "dev" ] ; then
            gh api \
              --method POST \
              -H "Accept: application/vnd.github.v3+json" \
              /repos/${{ github.repository }}/milestones \
              -f title='${{ env.deployment_version }}' \
              -f state='open' \
              -f description='${{ env.deployment_version }}'          
            echo " "
            echo "***********************************************"
            echo "Update Issue: ${{ github.event.issue.number }} "
            echo "***********************************************"
            echo " "
            gh issue edit ${{ github.event.issue.number }} \
              -m "${{ env.deployment_version }}" \
              --add-project "${{ env.github_deploymentproject }}" 
          else
            echo "No Milestone created, only in dev environment in the first deployment issue"
          fi

  ##################################################################
  # Deployment
  ##################################################################
  deployment:
    needs: [verify]
    if: needs.verify.outputs.deployment == 'true'
    name: CloudHub1
    runs-on: ubuntu-latest
    environment: ${{ needs.verify.outputs.deployment-env }}
    outputs:
      # Indicates if the service was deployed
      outcome: ${{ steps.verify-issue-close-deployment.outputs.outcome }}

    steps:
      - name: Get workflow metadata
        uses: jpontdia/common-devops/packages/configuration-issuemanagement@main
        with:
          keyvault-key: '${{ inputs.keyvault-key }}'
          azure-credentials: '${{ secrets.azure-credentials }}'
      
      - id: issue-comment
        name: Add issue comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE: ${{ github.event.issue.html_url }}
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Add issue comment: ${{ github.event.issue.number }} "
          echo "***********************************************"
          echo " "
          gh issue comment ${{ github.event.issue.number }} \
            -b "The deployment process is starting" 

      - name: Get jar file
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: '${{ github.repository }}'
          version: 'tags/${{ env.deployment_version }}'
          regex: false
          file: "${{ env.service_artifact }}-${{ env.deployment_version }}-${{ env.MULE_APPLICATION_TYPE }}"
          token: ${{ secrets.GITHUB_TOKEN }}

      - id: debug-workplace
        name: Debug workplace
        shell: bash
        run: |
          echo " "
          echo "***************************************"
          echo "Debug workplace - Show root files"
          echo "***************************************"
          echo " "
          ls -l
          
      - id: deployment-ch1
        name: Deploy the service in the cloud
        uses: jpontdia/common-devops/packages/process-cloudhub1@main
        with:
          deployment-env: ${{ env.deployment_environment }}

      - id: verify-issue-close-deployment
        name: Verify if close issue with error on deployment
        if: always()
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE: ${{ github.event.issue.html_url }}
        run: |
          echo " "
          echo "***********************************************"
          echo "Verify if close the issue with error "
          echo "***********************************************"
          echo " "
          echo "Output steps.deployment-ch1.outputs.outcome=${{ steps.deployment-ch1.outputs.outcome }}"
          if [ "${{ steps.deployment-ch1.outputs.outcome }}" == "" ] ; then
            echo "  Closing issue with internal error "
            gh issue close ${{ github.event.issue.number }} \
              -c "${{ env.MESSAGE_SERVICE_INTERNAL_ERROR }}" \
              -r "not planned"
          elif [ "${{ steps.deployment-ch1.outputs.outcome }}" == "failure" ] ; then
            echo "  Closing issue with deployment error "
            gh issue close ${{ github.event.issue.number }} \
              -c "${{ env.MESSAGE_SERVICE_NOT_DEPLOYED }}" \
              -r "not planned"
          else
            echo "Add comment to issue"
            gh issue comment ${{ github.event.issue.number }} \
              -b "The deployment was successfull"
            echo "  No error on deployment, execute next job"
            echo "outcome=success" >> $GITHUB_OUTPUT
          fi

      - name: Create badge for deployment
        uses: jpontdia/common-devops/packages/badge@main
        with:
          label: '${{ env.deployment_environment }} version'
          status: '${{ env.deployment_version }}'
          color: '535597'
          file: ${{ env.service_name }}-${{ env.deployment_environment }}.svg

  ##################################################################
  # Testing
  ##################################################################
  testing:
    needs: [deployment]
    if: needs.deployment.outputs.outcome == 'success'
    name: testing
    runs-on: ubuntu-latest

    steps:
      - name: Get workflow metadata
        uses: jpontdia/common-devops/packages/configuration-issuemanagement@main
        with:
          keyvault-key: '${{ inputs.keyvault-key }}'
          azure-credentials: '${{ secrets.azure-credentials }}'

      - id: issue-comment
        name: Add issue comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE: ${{ github.event.issue.html_url }}
        shell: bash
        run: |
          echo " "
          echo "****************************************************"
          echo "Add issue comment: ${{ github.event.issue.number }} "
          echo "****************************************************"
          echo " "
          gh issue comment ${{ github.event.issue.number }} \
            -b "The testing process is starting" 

      - name: Execute Mulesoft BAT
        id: bat-testing
        uses: jpontdia/common-devops/packages/process-bat@main
        with:
          keyvault-key: ${{ inputs.keyvault-key }}
          azure-credentials: ${{ secrets.azure-credentials }}
          deployment-env: ${{ env.deployment_environment }}

      - id: issue-close-test
        name: Close issue
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE: ${{ github.event.issue.html_url }}
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Update Issue: ${{ github.event.issue.number }} "
          echo "***********************************************"
          echo " "
          echo "variable steps.bat-testing.outputs.outcome=${{ steps.bat-testing.outputs.outcome }}"
          if [ "${{ steps.bat-testing.outputs.outcome }}" == "skipped" ] ; then
            echo "  Closing issue with tests skipped"
            gh issue close ${{ github.event.issue.number }} \
              -c "${{ env.MESSAGE_SERVICE_NO_BAT }}" \
              -r "completed"
          elif [ "${{ steps.bat-testing.outputs.outcome }}" == "success" ] ; then
            echo "  Closing issue with success tests"
            gh issue close ${{ github.event.issue.number }} \
              -c "${{ env.MESSAGE_SERVICE_BAT_SUCCESS }}" \
              -r "completed"
          else
            echo "  Closing issue with testing error"
            gh issue close ${{ github.event.issue.number }} \
              -c "${{ env.MESSAGE_SERVICE_BAT_FAILURE }}" \
              -r "not planned"
          fi

  ##################################################################
  # Custom Logger
  ##################################################################
  custom-logger:
    needs: [deployment]
    if: needs.deployment.outputs.outcome == 'success'
    name: custom-logger
    runs-on: ubuntu-latest

    steps:
      - name: Get workflow metadata
        uses: jpontdia/common-devops/packages/configuration-issuemanagement@main
        with:
          keyvault-key: '${{ inputs.keyvault-key }}'
          azure-credentials: '${{ secrets.azure-credentials }}'

      - id: issue-comment-start
        name: Add issue comment for start process
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE: ${{ github.event.issue.html_url }}
        shell: bash
        run: |
          echo " "
          echo "****************************************************"
          echo "Add issue comment: ${{ github.event.issue.number }} "
          echo "****************************************************"
          echo " "
          gh issue comment ${{ github.event.issue.number }} \
            -b "The process for setting the custom logging is starting" 
            
      - name: Set custom logger
        id: custom-logger
        uses: jpontdia/common-devops/packages/process-customlogger@main
        with:
          deployment-env: ${{ env.deployment_environment }}

      - id: issue-comment-end
        name: Add issue comment for end process
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE: ${{ github.event.issue.html_url }}
        shell: bash
        run: |
          echo " "
          echo "****************************************************"
          echo "Add issue comment: ${{ github.event.issue.number }} "
          echo "****************************************************"
          echo " "
          echo "Output steps.custom-logger.outputs.outcome=${{ steps.custom-logger.outputs.outcome }}"

          gh issue comment ${{ github.event.issue.number }} \
            -b "The process for setting the custom logging ended with status=${{ steps.custom-logger.outputs.outcome }}" 


  ##################################################################
  # Forward to next environnment
  ##################################################################
  forward:
    needs: [testing]
    if: contains(toJson(github.event.issue.labels), 'forward')
    name: forward
    runs-on: ubuntu-latest

    steps:
      - name: Get workflow metadata
        uses: jpontdia/common-devops/packages/configuration-issuemanagement@main
        with:
          keyvault-key: '${{ inputs.keyvault-key }}'
          azure-credentials: '${{ secrets.azure-credentials }}'

      - id: issue-create
        name: Create deployment issue
        env:
          GITHUB_TOKEN: ${{ env.github_admintasks_accesstoken }}
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Create Issue "
          echo "***********************************************"
          echo " "
          if [ "${{ env.deployment_environment }}" == "dev" ] ; then
            echo "  Create issue for deployment in tst"
            gh -R "${{ github.repository }}" issue create \
              -t "Deployment tst ${{ env.service_name }} ${{ env.deployment_version }}" \
              -a "${{ env.github_deployeruser }}" \
              -b "This action was triggered from the forward job in the deployment workflow" \
              -l "${{ env.LABEL_TST}}" \
              -m "${{ env.deployment_version }}" \
              -p "${{ env.github_deploymentproject }}"
          elif [ "${{ env.deployment_environment }}" == "tst" ] ; then
            echo "  Create issue for deployment in prd"
            gh -R "${{ github.repository }}" issue create \
              -t "Deployment prd ${{ env.service_name }} ${{ env.deployment_version }}" \
              -a "${{ env.github_deployeruser }}" \
              -b "This action was triggered from the forward job in the deployment workflow" \
              -l "${{ env.LABEL_PRD}}" \
              -m "${{ env.deployment_version }}" \
              -p "${{ env.github_deploymentproject }}"
          else
            echo "  There is an error on the logic for deployment: dev -> tst -> prd"
            exit 1
          fi