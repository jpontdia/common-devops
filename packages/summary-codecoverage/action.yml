name: 'Summary - Publish test results'
description: 'Summary - Publish test results'

runs:
  using: "composite"
  steps:

    - name: Initialize variables
      shell: bash
      run: |
        echo " "
        echo "*****************************************************"
        echo "Code Coverage - Initializing variables"
        echo "*****************************************************"
        echo " "
        # Set the initial values for the badge status and color
        echo "BADGE_STATUS=Error parsing" >> $GITHUB_ENV
        echo "BADGE_COLOR=800000" >> $GITHUB_ENV

    - name: Publish - Application Coverage Report
      if: ${{ hashFiles('target/site/munit/coverage/*') != '' }}
      uses: actions/upload-artifact@master
      with:
        name: munit-application-coverage-report
        path: target/site/munit/coverage/*
        
    - name: Summary - Add code coverage
      id: summary-codecoverage
      if: ${{ hashFiles('target/site/munit/coverage/summary.html') != '' }}
      shell: bash
      run: |
        echo " "
        echo "*****************************************************"
        echo "Code coverage - Get the summary report if exists"
        echo "*****************************************************"
        echo " "            

        summary_report=target/site/munit/coverage/summary.html

        # Verify if summary report exists
        if test -f "$summary_report"; then

          temporal=""
          line=0
          trigger=0
          while IFS= read -r p; do
          
            if [[ "$p" == *"<div class=\"col-md-8 col-md-offset-2\">"* ]]; then
              echo "Summary starts at line: $line"
              ((line=line+1))
              trigger=1
              continue
            fi

            if [[ $trigger == 1 ]]; then
              # echo "${p:0:6}"
              echo "$p"
              if [[ "${p:0:6}" == "</div>" ]]; then
                echo "Exit condition at line: $line"
                break
              else
                temporal+=$p
              fi
            fi

            ((line=line+1))
          done < $summary_report

          # Remove html tag: <a>
          temporal=$(sed -e 's/<\/a[^>]*>//g' <<<"$temporal")
          temporal=$(sed -e 's/<a[^>]*>//g' <<<"$temporal")

          # Add job summary 
          echo "<div>" >> $GITHUB_STEP_SUMMARY
          echo "$temporal" >> $GITHUB_STEP_SUMMARY
          echo "</div>" >> $GITHUB_STEP_SUMMARY

          # The coverage process was executed
          # echo "COVERAGE_PROCESS='True'" >> $GITHUB_ENV
          echo "CODE_COVERAGE_EXECUTION=true" >> $GITHUB_OUTPUT
        else
          # There is no summary report
          # echo "COVERAGE_PROCESS='False'" >> $GITHUB_ENV
          echo "CODE_COVERAGE_EXECUTION=false" >> $GITHUB_OUTPUT
        fi

    - name: Set the code coverage results as environment variable
      if: steps.summary-codecoverage.outputs.CODE_COVERAGE_EXECUTION == 'true'
      id: json_var
      shell: bash
      run: |
        echo " "
        echo "******************************************************"
        echo "Code coverage - export the summary report as env var"
        echo "******************************************************"
        echo " "  

        content=`cat target/site/munit/coverage/munit-coverage.json`
        # the following lines are only required for multi line json
        content="${content//'%'/'%25'}"
        content="${content//$'\n'/'%0A'}"
        content="${content//$'\r'/'%0D'}"
        # end of optional handling for multi line json
        echo "::set-output name=packageJson::$content"

    - name: Set badge color and code coverage as integer
      if: steps.summary-codecoverage.outputs.CODE_COVERAGE_EXECUTION == 'true'
      shell: bash
      run: |
        echo " "
        echo "*****************************************************"
        echo "Code coverage - Set badge color and status"
        echo "*****************************************************"
        echo " "      
        coverage_float=${{ fromJSON(steps.json_var.outputs.packageJson).coverage }}
        coverage=${coverage_float%.*}
        minimum=${{ fromJSON(steps.json_var.outputs.packageJson).requiredApplicationCoverage }}
        echo "Application coverage: $coverage"
        echo "Minimum: $minimum"
        echo "BADGE_STATUS=$coverage of $minimum %" >> $GITHUB_ENV

        if [[ "$((coverage))" -ge "$((minimum))" ]]; then
          echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
          echo "  Code coverage is equal or greater than minimum"
        else
          echo "BADGE_COLOR=800000" >> $GITHUB_ENV
          echo "  Code coverage is less than minimum"
        fi
        echo " "      

    - name: Badge for skipped tests
      if: ${{ hashFiles('target/site/munit/coverage/summary.html') == '' }}
      shell: bash
      run: |
        echo " "
        echo "*****************************************************"
        echo "Code coverage - Badge color for skipped tests"
        echo "*****************************************************"
        echo " "
        echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
        echo "BADGE_STATUS=Skipped" >> $GITHUB_ENV

    - name: Create badge for code coverage
      uses: jpontdia/common-devops/packages/badge@main
      if: always()
      with:
        label: Code coverage
        status: ${{ env.BADGE_STATUS }}
        color: ${{ env.BADGE_COLOR }}
        file: ${{ env.service_name }}-cc.svg



